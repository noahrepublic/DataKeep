"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[709],{5861:e=>{e.exports=JSON.parse('{"functions":[{"name":"GetStore","desc":"Loads a store from a [DataStoreService:GetDataStore()](https://create.roblox.com/docs/reference/engine/classes/DataStoreService#GetDataStore) and returns a Store object.\\n\\n```lua\\nlocal dataTemplate = {\\n\\tTest = \\"Hello World!\\",\\n}\\n\\nlocal store = DataKeep.GetStore(\\"TestStore\\", dataTemplate):expect()\\n```\\n\\n:::info\\nStores can be loaded multiple times as they are cached.\\n:::","params":[{"name":"storeInfo","desc":"","lua_type":"StoreInfo | string"},{"name":"dataTemplate","desc":"","lua_type":"{ [string]: any }"},{"name":"wrapper","desc":"","lua_type":"Wrapper | {}"}],"returns":[{"desc":"","lua_type":"Promise<Store>"}],"function_type":"static","source":{"line":179,"path":"src/init.luau"}},{"name":"SetConfig","desc":"Allows to overwrite default config values. Only for experienced developers.\\n\\n```lua\\nDataKeep.SetConfig({\\n\\tlogLevel = DataKeep.Enums.LogLevel.None,\\n\\tsaveInterval = 60,\\n})\\n```\\n\\n:::info\\nShould be used before any other functions.\\n:::","params":[{"name":"overwrites","desc":"","lua_type":"{ assumeDeadLock: number?, internalKeepCleanupInterval: number?, loadKeepDataStoreFailTimeout: number?, saveInterval: number?, forceLoadMaxAttempts: number?, releaseRetryMaxAttempts: number?, criticalStateThreshold: number?, maxIssueTime: number?, maxCriticalStateTime: number?, logLevel: string?, logPromiseTraceback: boolean? }"}],"returns":[],"function_type":"static","source":{"line":240,"path":"src/init.luau"}}],"properties":[{"name":"Enums","desc":"","lua_type":"Enums","source":{"line":77,"path":"src/init.luau"}},{"name":"Wrapper","desc":"","lua_type":"Wrapper","source":{"line":82,"path":"src/init.luau"}},{"name":"IssueSignal","desc":"Fired when an issue occurs, like a failed request.\\n\\n```lua\\nDataKeep.IssueSignal:Connect(function(err)\\n\\tprint(\\"Issue!\\", err)\\nend)\\n```","lua_type":"Signal<string>","source":{"line":95,"path":"src/init.luau"}},{"name":"CriticalStateSignal","desc":"Fired when the store enters or exits critical state. After it has failed many requests and maybe dangerous to proceed with purchases or other important actions.\\n\\n```lua\\nDataKeep.CriticalStateSignal:Connect(function(isInCriticalState)\\n\\tif isInCriticalState then\\n\\t\\tprint(\\"Critical state started!\\")\\n\\telse\\n\\t\\tprint(\\"Critical state ended!\\")\\n\\tend\\nend)\\n```","lua_type":"Signal<boolean>","source":{"line":112,"path":"src/init.luau"}}],"types":[{"name":"Wrapper","desc":"Wrapper functions that are inheritted by Keeps when they are loaded.\\n\\n:::info\\nAny wrapper changes after [.GetStore()](#GetStore) will not apply to that store but the next one.\\n:::","lua_type":"{ [string]: <T>(self: Keep, ...T) -> () }","source":{"line":67,"path":"src/init.luau"}},{"name":"Enums","desc":"","lua_type":"{ LoadMethod: LoadMethod, LogLevel: LogLevel }","source":{"line":72,"path":"src/init.luau"}},{"name":"LoadMethod","desc":"### \\"ForceLoad\\" (default)\\n\\nAttempts to load the Keep. If the Keep is session-locked, it will either be released for that remote server or \\"stolen\\" if it\'s not responding (possibly in dead lock).\\n\\n\\n### \\"Steal\\"\\n\\nLoads keep immediately, ignoring an existing remote session lock and applying a session lock for this session.\\n\\n\\n### \\"Cancel\\"\\n\\nCancels the load of the Keep.","lua_type":"{ ForceLoad: string, Steal: string, Cancel: string }","source":{"line":24,"path":"src/Types.luau"}},{"name":"LogLevel","desc":"### \\"All\\"\\n\\nLogs everything.\\n\\n\\n### \\"Warn\\" (default)\\n\\nLogs warnings and errors.\\n\\n\\n### \\"Error\\"\\n\\nLogs errors only.\\n\\n\\n### \\"None\\"\\n\\nNo logs.","lua_type":"{ All: string, Warn: string, Error: string, None: string }","source":{"line":54,"path":"src/Types.luau"}}],"name":"DataKeep","desc":"","realm":["Server"],"source":{"line":56,"path":"src/init.luau"}}')}}]);