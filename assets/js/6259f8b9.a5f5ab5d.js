"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[533],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>y});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),i=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},p=function(e){var n=i(e.components);return t.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},P=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=i(r),P=a,y=d["".concat(l,".").concat(P)]||d[P]||u[P]||o;return r?t.createElement(y,c(c({ref:n},p),{},{components:r})):t.createElement(y,c({ref:n},p))}));function y(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=P;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:a,c[1]=s;for(var i=2;i<o;i++)c[i]=r[i];return t.createElement.apply(null,c)}return t.createElement.apply(null,r)}P.displayName="MDXCreateElement"},6251:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var t=r(87462),a=(r(67294),r(3905));const o={sidebar_position:5},c="Developer Products",s={unversionedId:"DevProducts",id:"DevProducts",title:"Developer Products",description:"The following example shows how you would handle developer product purchases:",source:"@site/docs/DevProducts.md",sourceDirName:".",slug:"/DevProducts",permalink:"/DataKeep/docs/DevProducts",draft:!1,editUrl:"https://github.com/noahrepublic/DataKeep/edit/main/docs/DevProducts.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"defaultSidebar",previous:{title:"WriteLib",permalink:"/DataKeep/docs/WriteLib"},next:{title:"DataKeep vs ProfileService",permalink:"/DataKeep/docs/Versus"}},l={},i=[],p={toc:i},d="wrapper";function u(e){let{components:n,...r}=e;return(0,a.kt)(d,(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"developer-products"},"Developer Products"),(0,a.kt)("p",null,"The following example shows how you would handle developer product purchases:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- DevProducts.luau\n\nlocal DataKeep = require(path_to_datakeep)\n\nlocal devProducts = {\n    [product_id_here] = function(player: Player, keep: DataKeep.Keep)\n        keep.Data.Coins += 100\n\n        print(`{player.Name} purchased some coins!`)\n    end,\n}\n\nreturn devProducts\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- SetProcessReceipt.luau\n\nlocal MarketplaceService = game:GetService("MarketplaceService")\nlocal Players = game:GetService("Players")\n\nlocal DataKeep = require(path_to_datakeep)\nlocal DevProducts = require(path_to_devproducts)\n\nlocal purchaseHistoryLimit = 50\n\nlocal function setProcessReceipt(store: DataKeep.Store, keyPrefix: string)\n    local function processReceipt(receiptInfo): Enum.ProductPurchaseDecision\n        local player = Players:GetPlayerByUserId(receiptInfo.PlayerId)\n\n        if not player then\n            return Enum.ProductPurchaseDecision.NotProcessedYet\n        end\n\n        local isLoaded, keep = store:LoadKeep(keyPrefix .. player.UserId):await()\n\n        if not isLoaded then\n            return Enum.ProductPurchaseDecision.NotProcessedYet\n        end\n\n        if not keep then\n            return Enum.ProductPurchaseDecision.NotProcessedYet\n        end\n\n        if not keep:IsActive() then\n            return Enum.ProductPurchaseDecision.NotProcessedYet\n        end\n\n        if not keep.Data.PurchaseHistory then\n            keep.Data.PurchaseHistory = {}\n        end\n\n        if table.find(keep.Data.PurchaseHistory, receiptInfo.PurchaseId) then\n            -- the purchase has been added to the player\'s data, but it might not have saved yet\n            local success = keep:Save():await()\n\n            if success then\n                return Enum.ProductPurchaseDecision.PurchaseGranted\n            else\n                return Enum.ProductPurchaseDecision.NotProcessedYet\n            end\n        end\n\n        -- remove purchaseIds which are beyond the limit\n        while #keep.Data.PurchaseHistory >= purchaseHistoryLimit do\n            table.remove(keep.Data.PurchaseHistory, 1)\n        end\n\n        local grantProductSuccess = pcall(DevProducts[receiptInfo.ProductId], player, keep)\n\n        if not grantProductSuccess then\n            return Enum.ProductPurchaseDecision.NotProcessedYet\n        end\n\n        table.insert(keep.Data.PurchaseHistory, receiptInfo.PurchaseId)\n\n        local saveSuccess = keep:Save():await()\n\n        if not saveSuccess then\n            return Enum.ProductPurchaseDecision.NotProcessedYet\n        end\n\n        return Enum.ProductPurchaseDecision.PurchaseGranted\n    end\n\n    MarketplaceService.ProcessReceipt = processReceipt\nend\n\nreturn setProcessReceipt\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- Main.luau\n\nlocal Players = game:GetService("Players")\n\nlocal DataKeep = require(path_to_datakeep)\nlocal SetProcessReceipt = require(path_to_setprocessreceipt)\n\nlocal dataTemplate = { Coins = 0 }\nlocal keyPrefix = "Player_"\n\nlocal loadedKeeps = {}\n\nlocal keepStore = DataKeep.GetStore("PlayerData", dataTemplate, {}):expect()\n\nlocal function onPlayerAdded(player: Player)\n    keepStore:LoadKeep(keyPrefix .. player.UserId):andThen(function(keep)\n        if keep == nil then\n            player:Kick("Session lock interrupted!")\n        end\n\n        keep:Reconcile()\n        keep:AddUserId(player.UserId) -- help with GDPR requests\n\n        keep.Releasing:Connect(function(state) -- don\'t have to clean up, it cleans up internally\n            state:andThen(function()\n                print(`{player.Name}\'s Keep has been released!`)\n\n                player:Kick("Session released!")\n                loadedKeeps[player] = nil\n            end):catch(function(err)\n                warn(`{player.Name}\'s Keep failed to release!`, err)\n            end)\n        end)\n\n        if not player:IsDescendantOf(Players) then\n            keep:Release()\n            return\n        end\n\n        loadedKeeps[player] = keep\n\n        print(`Loaded {player.Name}\'s Keep!`)\n    end)\nend\n\n-- SetProcessReceipt() must be called before the onPlayerAdded(),\n-- otherwise the player\'s existing receipts won\'t be processed.\nSetProcessReceipt(keepStore, keyPrefix)\n\n-- loop through already connected players in case they joined before DataKeep loaded\nfor _, player in Players:GetPlayers() do\n    task.spawn(onPlayerAdded, player)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n\nPlayers.PlayerRemoving:Connect(function(player)\n    local keep = loadedKeeps[player]\n\n    if not keep then\n        return\n    end\n\n    keep:Release()\nend)\n')))}u.isMDXComponent=!0}}]);