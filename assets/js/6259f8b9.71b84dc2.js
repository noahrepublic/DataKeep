"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[533],{3905:(e,n,t)=>{t.d(n,{Zo:()=>i,kt:()=>P});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},i=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),d=p(t),y=a,P=d["".concat(l,".").concat(y)]||d[y]||u[y]||o;return t?r.createElement(P,c(c({ref:n},i),{},{components:t})):r.createElement(P,c({ref:n},i))}));function P(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=y;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:a,c[1]=s;for(var p=2;p<o;p++)c[p]=t[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},6251:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const o={sidebar_position:5},c="Developer Products",s={unversionedId:"DevProducts",id:"DevProducts",title:"Developer Products",description:"The following example shows how you would handle developer product purchases:",source:"@site/docs/DevProducts.md",sourceDirName:".",slug:"/DevProducts",permalink:"/DataKeep/docs/DevProducts",draft:!1,editUrl:"https://github.com/noahrepublic/DataKeep/edit/main/docs/DevProducts.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"defaultSidebar",previous:{title:"WriteLib",permalink:"/DataKeep/docs/WriteLib"},next:{title:"DataKeep vs ProfileService",permalink:"/DataKeep/docs/Versus"}},l={},p=[],i={toc:p},d="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"developer-products"},"Developer Products"),(0,a.kt)("p",null,"The following example shows how you would handle developer product purchases:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- DataTemplate.luau\n\nlocal dataTemplate = {\n    PurchaseHistory = {},\n\n    Coins = 0,\n}\n\nexport type template = typeof(dataTemplate)\n\nreturn table.freeze(dataTemplate)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- DevProducts.luau\n\nlocal DataKeep = require(path_to_datakeep)\nlocal DataTemplate = require(path_to_datatemplate)\n\nlocal devProducts = {\n    [product_id_here] = function(player: Player, keep: DataKeep.Keep<DataTemplate.template, {}>)\n        keep.Data.Coins += 100\n\n        print(`{player.Name} purchased some coins!`)\n    end,\n}\n\nreturn devProducts\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- SetProcessReceipt.luau\n\nlocal MarketplaceService = game:GetService("MarketplaceService")\nlocal Players = game:GetService("Players")\n\nlocal DataKeep = require(path_to_datakeep)\nlocal DataTemplate = require(path_to_datatemplate)\nlocal DevProducts = require(path_to_devproducts)\n\nlocal purchaseHistoryLimit = 50\n\nlocal function setProcessReceipt(store: DataKeep.Store<DataTemplate.template, {}>, keyPrefix: string)\n    local function processReceipt(receiptInfo): Enum.ProductPurchaseDecision\n        local player = Players:GetPlayerByUserId(receiptInfo.PlayerId)\n\n        if not player then\n            return Enum.ProductPurchaseDecision.NotProcessedYet\n        end\n\n        local isLoaded, keep = store:LoadKeep(keyPrefix .. player.UserId):await()\n\n        if not isLoaded then\n            return Enum.ProductPurchaseDecision.NotProcessedYet\n        end\n\n        if not keep then\n            return Enum.ProductPurchaseDecision.NotProcessedYet\n        end\n\n        if not keep:IsActive() then\n            return Enum.ProductPurchaseDecision.NotProcessedYet\n        end\n\n        if not keep.Data.PurchaseHistory then\n            keep.Data.PurchaseHistory = {}\n        end\n\n        if table.find(keep.Data.PurchaseHistory, receiptInfo.PurchaseId) then\n            -- the purchase has been added to the player\'s data, but it might not have saved yet\n            local success = keep:Save():await()\n\n            if success then\n                return Enum.ProductPurchaseDecision.PurchaseGranted\n            else\n                return Enum.ProductPurchaseDecision.NotProcessedYet\n            end\n        end\n\n        -- remove purchaseIds which are beyond the limit\n        while #keep.Data.PurchaseHistory >= purchaseHistoryLimit do\n            table.remove(keep.Data.PurchaseHistory, 1)\n        end\n\n        local grantProductSuccess = pcall(DevProducts[receiptInfo.ProductId], player, keep)\n\n        if not grantProductSuccess then\n            return Enum.ProductPurchaseDecision.NotProcessedYet\n        end\n\n        table.insert(keep.Data.PurchaseHistory, receiptInfo.PurchaseId)\n\n        local saveSuccess = keep:Save():await()\n\n        if not saveSuccess then\n            return Enum.ProductPurchaseDecision.NotProcessedYet\n        end\n\n        return Enum.ProductPurchaseDecision.PurchaseGranted\n    end\n\n    MarketplaceService.ProcessReceipt = processReceipt\nend\n\nreturn setProcessReceipt\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- Main.luau\n\nlocal Players = game:GetService("Players")\n\nlocal DataKeep = require(path_to_datakeep)\nlocal DataTemplate = require(path_to_datatemplate)\nlocal SetProcessReceipt = require(path_to_setprocessreceipt)\n\nlocal keyPrefix = "Player_"\n\nlocal loadedKeeps = {}\n\nlocal keepStore = DataKeep.GetStore("PlayerData", DataTemplate, {}):expect()\n\nlocal function onPlayerAdded(player: Player)\n    keepStore:LoadKeep(keyPrefix .. player.UserId):andThen(function(keep)\n        if keep == nil then\n            player:Kick("Session lock interrupted!")\n        end\n\n        keep:Reconcile()\n        keep:AddUserId(player.UserId) -- help with GDPR requests\n\n        keep.Releasing:Connect(function(state) -- don\'t have to clean up, it cleans up internally\n            state:andThen(function()\n                print(`{player.Name}\'s Keep has been released!`)\n\n                player:Kick("Session released!")\n                loadedKeeps[player] = nil\n            end):catch(function(err)\n                warn(`{player.Name}\'s Keep failed to release!`, err)\n            end)\n        end)\n\n        if not player:IsDescendantOf(Players) then\n            keep:Release()\n            return\n        end\n\n        loadedKeeps[player] = keep\n\n        print(`Loaded {player.Name}\'s Keep!`)\n    end)\nend\n\n-- SetProcessReceipt() must be called before the onPlayerAdded(),\n-- otherwise the player\'s existing receipts won\'t be processed.\nSetProcessReceipt(keepStore, keyPrefix)\n\n-- loop through already connected players in case they joined before DataKeep loaded\nfor _, player in Players:GetPlayers() do\n    task.spawn(onPlayerAdded, player)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n\nPlayers.PlayerRemoving:Connect(function(player)\n    local keep = loadedKeeps[player]\n\n    if not keep then\n        return\n    end\n\n    keep:Release()\nend)\n')))}u.isMDXComponent=!0}}]);